using CommerceApi.Base;
using CommerceApi.ShopperLogin;

// DAVE NEEDS TO DO THIS BIT!
//
// Type of the first input parameter for the auth function
// type AuthFuncParamType = Parameters<sdk.{{metadata.shopperAuthClient}}["{{metadata.shopperAuthApi}}"]>[0];

/**
 * This wraps the parameters for the authorization call to retrieve a token.
 * That call can be made directly, this is here just for convenience
 * ```ts
 * const clientConfig: ClientConfig = {
 *  parameters: {
 *      clientId: "XXXXXX",
 *      organizationId: "XXXX",
 *      shortCode: "XXX",
 *      siteId: "XX"
 *  }
 * };
 * helpers.getShopperToken(clientConfig, { type: "guest" })
 * ```
 * @param clientConfig - Client configuration properties
 * @param body - Post body required for authorization
 * @returns the retrieved Shopper token
 */
public class ShopperCustomer
{
    private readonly ShopperCustomers _client;
    private readonly ShopperLogin _loginClient;

    public ShopperCustomer(ClientConfig clientConfig)
    {
        _client = new ShopperCustomers(clientConfig);
        _loginClient = new ShopperLogin(clientConfig);
    }

    public async Task<ShopperToken<Customer>> GetShopperToken(dynamic body)
    {
        var response = await _loginClient.authorizeCustomer(body, true);

        if (!response.IsSuccessStatusCode)
        {
            throw new HttpRequestException("Response was not successful");
        }

        var dto = await response.Content.ReadAsAsync<Customer>();
        var authHeader = response.Headers.GetValues("Authorization").First();
        string token = authHeader.Replace("Bearer ", "");

        return new ShopperToken<Customer>(dto, token);
    }
}