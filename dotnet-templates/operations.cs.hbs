// *****************************************************************************************
// 
// templates/operations.*.hbs
//
// *****************************************************************************************
{{#each model.encodes.endPoints}}
  {{#each operations}}
/*
{{{formatForTsDoc description}}}
*/
public class {{name}}Parameters
{
    {{!-- PATH parameters --}}
    {{#each ../parameters }}
    {{#if @first}}// PATH parameters{{/if}}
    {{!-- {{#if (getValue description)}}{{{getValue description}}}{{/if}} --}}
    public required string {{{getValueCSharp name}}} { get; set; }
    {{/each}}
    {{!-- QUERY parameters --}}
    {{#each request.queryParameters}}
    {{#if @first}}

    // QUERY parameters
    {{/if}}
    public {{#if (is required "true")}}required string{{else}}string?{{/if}} {{{getValueCSharp name}}} { get; set; }
    {{#if @last}}
    public Dictionary<string, string>? Custom { get; set; }
    {{/if}}
    {{/each}}
    {{!-- HEADER parameters --}}
    {{#each request.headers}}
    {{#if @first}}
    
    // HEADER parameters{{/if}}
    {{!-- {{#if (getValue description)}}{{{getValue description}}}{{/if}} --}}
    public string? {{{name}}} { get; set; }
    {{/each}}
    {{!-- BODY parameter --}}
    {{#or (is method "patch") (is method "post") (is method "put")}}

    // BODY parameter
    public required {{getPayloadTypeFromRequest request}} Body { get; set; }
    {{/or}}
}

{{!-- public async Task<{{#if (equalsCSharp (getReturnTypeFromOperation this) 'void')}}Response{{else}}{{getReturnTypeFromOperation this}}{{/if}}> {{name}}DumDum({{name}}Parameters options, bool? rawResponse = null) --}}
{{#if (equalsCSharp (getReturnTypeFromOperation this) 'void')}}
public async Task<HttpResponseMessage> {{name}}DumDum({{name}}Parameters options)
{{else}}
public async Task<({{getReturnTypeFromOperation this}} typedResponse, HttpResponseMessage rawResponse)> {{name}}DumDum({{name}}Parameters options)
{{/if}}
{
    var request = new HttpRequestMessage();
    request.Method = HttpMethod.{{getValueCSharp method}};

    {{!-- (1) PATH parameters --}}
    //
    // URI PATH parameters
    //
    var uriBuilder = new UriBuilder();
    var pathTemplate = "{{../path}}";
{{#each ../parameters }}
{{#if @first}}
    var pathReplacements = new Dictionary<string, string>
    {
    {{/if}}
        { "{{{name}}}", options.{{{getValueCSharp name}}} }{{#unless @last}},{{/unless}}
    {{#if @first}}
    };
{{/if}}
{{/each}}
    uriBuilder.Path = Regex.Replace(pathTemplate, "{(.*?)}", m => pathReplacements[m.Groups[1].Value]);
    {{!-- (2) QUERY parameters --}}
{{#each request.queryParameters}}
{{#if @first}}

    //
    // URI QUERY parameters
    //
    var query = HttpUtility.ParseQueryString(uriBuilder.Query);
{{/if}}
    query["{{{name}}}"] = options.{{{getValueCSharp name}}};
{{#if @last}}
    if (options.Custom != null)
    {
        foreach (var pair in options.Custom)
        {
            query[pair.Key] = pair.Value;
        }
    }
    uriBuilder.Query = query.ToString();
{{/if}}
{{/each}}
    request.RequestUri = uriBuilder.Uri;
    {{!-- (3) HEADER parameters --}}
{{#each request.headers}}
{{#if @first}}

    //
    // HEADER parameters
    //
{{/if}}
    {{!-- {{#if (getValue description)}}{{{getValue description}}}{{/if}} --}}
    request.Headers.{{{name}}} = new AuthenticationHeaderValue("TODO: Bearer or Basic???", options.{{{name}}});
    request.Headers.UserAgent.ParseAdd(ShopperLogin.USER_AGENT_VALUE);
{{/each}}
    {{!-- (4) BODY parameter --}}
{{#or (is method "patch") (is method "post") (is method "put")}}

    //
    // BODY parameter
    //
    {{!-- *      MEDIA TYPE {{getMediaTypeFromRequest request}} --}}
{{#if (eq (getMediaTypeFromRequest request) "application/json")}}
    request.Content = new StringContent(JsonConvert.SerializeObject(options.Body), Encoding.UTF8, MediaTypeNames.Application.Json);
{{else if (eq (getMediaTypeFromRequest request)  "application/x-www-form-urlencoded")}}
    var keyValues = new List<KeyValuePair<string, string>>();
    foreach (var prop in typeof({{getPayloadTypeFromRequest request}}).GetProperties())
    {
        var propValue = prop.GetValue(options.Body, null)?.ToString() ?? string.Empty;
        keyValues.Add(new KeyValuePair<string, string>(prop.Name, propValue));
    }
    request.Content = new FormUrlEncodedContent(keyValues);
{{else}}
    throw new Exception("Unsupported media type: {{getMediaTypeFromRequest request}}");
{{/if}}
{{/or}}

    //
    // Call the API
    //
    using (var client = new HttpClient())
    {
        var rawResponse = await client.SendAsync(request);

        if (rawResponse.IsSuccessStatusCode)
        {
{{#if (equalsCSharp (getReturnTypeFromOperation this) 'void')}}
            return rawResponse;
{{else}}
            string content = await rawResponse.Content.ReadAsStringAsync();
            var jsonSerializerOptions = new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };
            {{getReturnTypeFromOperation this}} typedResponse = JsonSerializer.Deserialize<{{getReturnTypeFromOperation this}}>(content, jsonSerializerOptions)!;
            return (typedResponse, rawResponse);
{{/if}}
        }
        else
        {
            var errorContent = await rawResponse.Content.ReadAsStringAsync();
            throw new HttpRequestException($"Request failed with status code {rawResponse.StatusCode}: {errorContent}");
        }
    }
}
  {{/each}}
{{/each}}