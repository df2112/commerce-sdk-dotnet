// *****************************************************************************************
// 
// templates/clientInstance.*.hbs
//
// *****************************************************************************************

using CommerceApi.Base;
using System.Net;
using System.Net.Http.Headers;
using System.Net.Mime;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Web;

{{#if (eq (pascalcase metadata.categories.[CC API Family].[0]) "")}}
namespace CommerceApi.{{name.upperCamelCase}};
{{else}}
namespace CommerceApi.{{pascalcase metadata.categories.[CC API Family].[0]}}.{{name.upperCamelCase}};
{{/if}}

/**
* [{{{metadata.name}}}](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta={{{metadata.assetId}}}:Summary)
* ==================================
*
* *{{metadata.description}}*<br />
*
* {{#if (isShopperAPI name) }}
* Example with shopper auth
* {{else}}
* For instructions on how to retrieve access token for admin APIs: <a>https://developer.salesforce.com/docs/commerce/commerce-api/guide/authorization-for-admin-apis.html</a><br/><br/>
* Example with admin auth
* {{/if}}
* ```typescript
* import { {{pascalcase metadata.categories.[CC API Family].[0]}}, ClientConfig{{#if (isShopperAPI name) }}, Customer, slasHelpers{{/if}} } from "commerce-sdk";
* // or
* const { {{pascalcase metadata.categories.[CC API Family].[0]}}, ClientConfig{{#if (isShopperAPI name) }}, Customer, slasHelpers{{/if}} } = require("commerce-sdk");
* 
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* {{#if (isShopperAPI name) }}
* // must be registered in SLAS. On server, redirectURI is never called
* const redirectURI = "http://localhost:3000/callback";
* const slasClient = new Customer.ShopperLogin(clientConfig);
* token = await slasHelpers.loginGuestUser(slasClient, { redirectURI });
* {{else}}
* token = { access_token: 'INSERT_ACCESS_TOKEN_HERE' };
* {{/if}}
* clientConfig.headers['authorization'] = `Bearer ${token.access_token}`;
* const {{name.lowerCamelCase}}Client = new {{pascalcase metadata.categories.[CC API Family].[0]}}.{{name.upperCamelCase}}(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: {{metadata.version}}<br />
* Last Updated: {{metadata.updatedDate}}<br />  
* </span>
{{#if (eq (lowercase metadata.categories.[CC Version Status].[0]) "beta")}}
* @beta 
* {{/if}}
* 
*/

public class {{name.upperCamelCase}}Client : CommerceApiClient 
{
    private const string USER_AGENT_HEADER = "user-agent";
    private const string USER_AGENT_VALUE = "commerce-sdk@{{parent.parent.metadata.sdkVersion}}";
    private string BASE_URI { get; set; }
    private readonly HttpClient _httpClient;

    public {{name.upperCamelCase}}Client(HttpClient httpClient, CommerceApiClientConfig config) : base(config)
    {
        _httpClient = httpClient;
        var pathTemplate = "{{getBaseUriFromDocument model}}";
        var pathReplacements = new Dictionary<string, string>
        {
            { "shortCode", config.ShortCode },
            { "version", config.Version }
        };
        BASE_URI = MapStringToProperty().Replace(pathTemplate, m => pathReplacements[m.Groups[1].Value]);
    }

    {{> operationsPartial-cs}}
}
